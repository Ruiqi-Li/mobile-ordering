/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-07-22 21:53:01 UTC)
 * on 2014-10-14 at 01:48:25 UTC 
 * Modify at your own risk.
 */

package com.appspot.ruiqi_test.frontend;

/**
 * Service definition for Frontend (v1).
 *
 * <p>
 * Mobile ordering system frontend API v1
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FrontendRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Frontend extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.19.0 of the frontend library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://ruiqi-test.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "frontend/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Frontend(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Frontend(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "amendOrder".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link AmendOrder#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcAmendOrderRequest}
   * @return the request
   */
  public AmendOrder amendOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcAmendOrderRequest content) throws java.io.IOException {
    AmendOrder result = new AmendOrder(content);
    initialize(result);
    return result;
  }

  public class AmendOrder extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderResponse> {

    private static final String REST_PATH = "front/amend_order";

    /**
     * Create a request for the method "amendOrder".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link AmendOrder#execute()} method to invoke the remote
     * operation. <p> {@link
     * AmendOrder#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcAmendOrderRequest}
     * @since 1.13
     */
    protected AmendOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcAmendOrderRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderResponse.class);
    }

    @Override
    public AmendOrder setAlt(java.lang.String alt) {
      return (AmendOrder) super.setAlt(alt);
    }

    @Override
    public AmendOrder setFields(java.lang.String fields) {
      return (AmendOrder) super.setFields(fields);
    }

    @Override
    public AmendOrder setKey(java.lang.String key) {
      return (AmendOrder) super.setKey(key);
    }

    @Override
    public AmendOrder setOauthToken(java.lang.String oauthToken) {
      return (AmendOrder) super.setOauthToken(oauthToken);
    }

    @Override
    public AmendOrder setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AmendOrder) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AmendOrder setQuotaUser(java.lang.String quotaUser) {
      return (AmendOrder) super.setQuotaUser(quotaUser);
    }

    @Override
    public AmendOrder setUserIp(java.lang.String userIp) {
      return (AmendOrder) super.setUserIp(userIp);
    }

    @Override
    public AmendOrder set(String parameterName, Object value) {
      return (AmendOrder) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "cancelOrder".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link CancelOrder#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest}
   * @return the request
   */
  public CancelOrder cancelOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest content) throws java.io.IOException {
    CancelOrder result = new CancelOrder(content);
    initialize(result);
    return result;
  }

  public class CancelOrder extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderResponse> {

    private static final String REST_PATH = "front/cancel_order";

    /**
     * Create a request for the method "cancelOrder".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link CancelOrder#execute()} method to invoke the remote
     * operation. <p> {@link
     * CancelOrder#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest}
     * @since 1.13
     */
    protected CancelOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderResponse.class);
    }

    @Override
    public CancelOrder setAlt(java.lang.String alt) {
      return (CancelOrder) super.setAlt(alt);
    }

    @Override
    public CancelOrder setFields(java.lang.String fields) {
      return (CancelOrder) super.setFields(fields);
    }

    @Override
    public CancelOrder setKey(java.lang.String key) {
      return (CancelOrder) super.setKey(key);
    }

    @Override
    public CancelOrder setOauthToken(java.lang.String oauthToken) {
      return (CancelOrder) super.setOauthToken(oauthToken);
    }

    @Override
    public CancelOrder setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CancelOrder) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CancelOrder setQuotaUser(java.lang.String quotaUser) {
      return (CancelOrder) super.setQuotaUser(quotaUser);
    }

    @Override
    public CancelOrder setUserIp(java.lang.String userIp) {
      return (CancelOrder) super.setUserIp(userIp);
    }

    @Override
    public CancelOrder set(String parameterName, Object value) {
      return (CancelOrder) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "changeStorage".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link ChangeStorage#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeStorageRequest}
   * @return the request
   */
  public ChangeStorage changeStorage(com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeStorageRequest content) throws java.io.IOException {
    ChangeStorage result = new ChangeStorage(content);
    initialize(result);
    return result;
  }

  public class ChangeStorage extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcStorageResponse> {

    private static final String REST_PATH = "front/change_storage";

    /**
     * Create a request for the method "changeStorage".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link ChangeStorage#execute()} method to invoke the remote
     * operation. <p> {@link ChangeStorage#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeStorageRequest}
     * @since 1.13
     */
    protected ChangeStorage(com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeStorageRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcStorageResponse.class);
    }

    @Override
    public ChangeStorage setAlt(java.lang.String alt) {
      return (ChangeStorage) super.setAlt(alt);
    }

    @Override
    public ChangeStorage setFields(java.lang.String fields) {
      return (ChangeStorage) super.setFields(fields);
    }

    @Override
    public ChangeStorage setKey(java.lang.String key) {
      return (ChangeStorage) super.setKey(key);
    }

    @Override
    public ChangeStorage setOauthToken(java.lang.String oauthToken) {
      return (ChangeStorage) super.setOauthToken(oauthToken);
    }

    @Override
    public ChangeStorage setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ChangeStorage) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ChangeStorage setQuotaUser(java.lang.String quotaUser) {
      return (ChangeStorage) super.setQuotaUser(quotaUser);
    }

    @Override
    public ChangeStorage setUserIp(java.lang.String userIp) {
      return (ChangeStorage) super.setUserIp(userIp);
    }

    @Override
    public ChangeStorage set(String parameterName, Object value) {
      return (ChangeStorage) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "changeTemplate".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link ChangeTemplate#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeTemplateRequest}
   * @return the request
   */
  public ChangeTemplate changeTemplate(com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeTemplateRequest content) throws java.io.IOException {
    ChangeTemplate result = new ChangeTemplate(content);
    initialize(result);
    return result;
  }

  public class ChangeTemplate extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcTemplateResponse> {

    private static final String REST_PATH = "front/change_template";

    /**
     * Create a request for the method "changeTemplate".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link ChangeTemplate#execute()} method to invoke the remote
     * operation. <p> {@link ChangeTemplate#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeTemplateRequest}
     * @since 1.13
     */
    protected ChangeTemplate(com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeTemplateRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcTemplateResponse.class);
    }

    @Override
    public ChangeTemplate setAlt(java.lang.String alt) {
      return (ChangeTemplate) super.setAlt(alt);
    }

    @Override
    public ChangeTemplate setFields(java.lang.String fields) {
      return (ChangeTemplate) super.setFields(fields);
    }

    @Override
    public ChangeTemplate setKey(java.lang.String key) {
      return (ChangeTemplate) super.setKey(key);
    }

    @Override
    public ChangeTemplate setOauthToken(java.lang.String oauthToken) {
      return (ChangeTemplate) super.setOauthToken(oauthToken);
    }

    @Override
    public ChangeTemplate setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ChangeTemplate) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ChangeTemplate setQuotaUser(java.lang.String quotaUser) {
      return (ChangeTemplate) super.setQuotaUser(quotaUser);
    }

    @Override
    public ChangeTemplate setUserIp(java.lang.String userIp) {
      return (ChangeTemplate) super.setUserIp(userIp);
    }

    @Override
    public ChangeTemplate set(String parameterName, Object value) {
      return (ChangeTemplate) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "confirmOrder".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link ConfirmOrder#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest}
   * @return the request
   */
  public ConfirmOrder confirmOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest content) throws java.io.IOException {
    ConfirmOrder result = new ConfirmOrder(content);
    initialize(result);
    return result;
  }

  public class ConfirmOrder extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderResponse> {

    private static final String REST_PATH = "front/confirm_order";

    /**
     * Create a request for the method "confirmOrder".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link ConfirmOrder#execute()} method to invoke the remote
     * operation. <p> {@link
     * ConfirmOrder#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest}
     * @since 1.13
     */
    protected ConfirmOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderResponse.class);
    }

    @Override
    public ConfirmOrder setAlt(java.lang.String alt) {
      return (ConfirmOrder) super.setAlt(alt);
    }

    @Override
    public ConfirmOrder setFields(java.lang.String fields) {
      return (ConfirmOrder) super.setFields(fields);
    }

    @Override
    public ConfirmOrder setKey(java.lang.String key) {
      return (ConfirmOrder) super.setKey(key);
    }

    @Override
    public ConfirmOrder setOauthToken(java.lang.String oauthToken) {
      return (ConfirmOrder) super.setOauthToken(oauthToken);
    }

    @Override
    public ConfirmOrder setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ConfirmOrder) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ConfirmOrder setQuotaUser(java.lang.String quotaUser) {
      return (ConfirmOrder) super.setQuotaUser(quotaUser);
    }

    @Override
    public ConfirmOrder setUserIp(java.lang.String userIp) {
      return (ConfirmOrder) super.setUserIp(userIp);
    }

    @Override
    public ConfirmOrder set(String parameterName, Object value) {
      return (ConfirmOrder) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "deleteTemplate".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link DeleteTemplate#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcDeleteTemplateRequest}
   * @return the request
   */
  public DeleteTemplate deleteTemplate(com.appspot.ruiqi_test.frontend.model.FrontendRpcDeleteTemplateRequest content) throws java.io.IOException {
    DeleteTemplate result = new DeleteTemplate(content);
    initialize(result);
    return result;
  }

  public class DeleteTemplate extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleResponse> {

    private static final String REST_PATH = "front/delete_template";

    /**
     * Create a request for the method "deleteTemplate".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link DeleteTemplate#execute()} method to invoke the remote
     * operation. <p> {@link DeleteTemplate#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcDeleteTemplateRequest}
     * @since 1.13
     */
    protected DeleteTemplate(com.appspot.ruiqi_test.frontend.model.FrontendRpcDeleteTemplateRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleResponse.class);
    }

    @Override
    public DeleteTemplate setAlt(java.lang.String alt) {
      return (DeleteTemplate) super.setAlt(alt);
    }

    @Override
    public DeleteTemplate setFields(java.lang.String fields) {
      return (DeleteTemplate) super.setFields(fields);
    }

    @Override
    public DeleteTemplate setKey(java.lang.String key) {
      return (DeleteTemplate) super.setKey(key);
    }

    @Override
    public DeleteTemplate setOauthToken(java.lang.String oauthToken) {
      return (DeleteTemplate) super.setOauthToken(oauthToken);
    }

    @Override
    public DeleteTemplate setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeleteTemplate) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeleteTemplate setQuotaUser(java.lang.String quotaUser) {
      return (DeleteTemplate) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeleteTemplate setUserIp(java.lang.String userIp) {
      return (DeleteTemplate) super.setUserIp(userIp);
    }

    @Override
    public DeleteTemplate set(String parameterName, Object value) {
      return (DeleteTemplate) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "deliverOrder".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link DeliverOrder#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest}
   * @return the request
   */
  public DeliverOrder deliverOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest content) throws java.io.IOException {
    DeliverOrder result = new DeliverOrder(content);
    initialize(result);
    return result;
  }

  public class DeliverOrder extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderResponse> {

    private static final String REST_PATH = "front/deliver_order";

    /**
     * Create a request for the method "deliverOrder".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link DeliverOrder#execute()} method to invoke the remote
     * operation. <p> {@link
     * DeliverOrder#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest}
     * @since 1.13
     */
    protected DeliverOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderResponse.class);
    }

    @Override
    public DeliverOrder setAlt(java.lang.String alt) {
      return (DeliverOrder) super.setAlt(alt);
    }

    @Override
    public DeliverOrder setFields(java.lang.String fields) {
      return (DeliverOrder) super.setFields(fields);
    }

    @Override
    public DeliverOrder setKey(java.lang.String key) {
      return (DeliverOrder) super.setKey(key);
    }

    @Override
    public DeliverOrder setOauthToken(java.lang.String oauthToken) {
      return (DeliverOrder) super.setOauthToken(oauthToken);
    }

    @Override
    public DeliverOrder setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeliverOrder) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeliverOrder setQuotaUser(java.lang.String quotaUser) {
      return (DeliverOrder) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeliverOrder setUserIp(java.lang.String userIp) {
      return (DeliverOrder) super.setUserIp(userIp);
    }

    @Override
    public DeliverOrder set(String parameterName, Object value) {
      return (DeliverOrder) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "generateReport".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link GenerateReport#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcReportRequest}
   * @return the request
   */
  public GenerateReport generateReport(com.appspot.ruiqi_test.frontend.model.FrontendRpcReportRequest content) throws java.io.IOException {
    GenerateReport result = new GenerateReport(content);
    initialize(result);
    return result;
  }

  public class GenerateReport extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleResponse> {

    private static final String REST_PATH = "frontend/generate_report";

    /**
     * Create a request for the method "generateReport".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link GenerateReport#execute()} method to invoke the remote
     * operation. <p> {@link GenerateReport#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcReportRequest}
     * @since 1.13
     */
    protected GenerateReport(com.appspot.ruiqi_test.frontend.model.FrontendRpcReportRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleResponse.class);
    }

    @Override
    public GenerateReport setAlt(java.lang.String alt) {
      return (GenerateReport) super.setAlt(alt);
    }

    @Override
    public GenerateReport setFields(java.lang.String fields) {
      return (GenerateReport) super.setFields(fields);
    }

    @Override
    public GenerateReport setKey(java.lang.String key) {
      return (GenerateReport) super.setKey(key);
    }

    @Override
    public GenerateReport setOauthToken(java.lang.String oauthToken) {
      return (GenerateReport) super.setOauthToken(oauthToken);
    }

    @Override
    public GenerateReport setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GenerateReport) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GenerateReport setQuotaUser(java.lang.String quotaUser) {
      return (GenerateReport) super.setQuotaUser(quotaUser);
    }

    @Override
    public GenerateReport setUserIp(java.lang.String userIp) {
      return (GenerateReport) super.setUserIp(userIp);
    }

    @Override
    public GenerateReport set(String parameterName, Object value) {
      return (GenerateReport) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getOrderDays".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link GetOrderDays#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public GetOrderDays getOrderDays() throws java.io.IOException {
    GetOrderDays result = new GetOrderDays();
    initialize(result);
    return result;
  }

  public class GetOrderDays extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderDaysResponse> {

    private static final String REST_PATH = "front/get_order_days";

    /**
     * Create a request for the method "getOrderDays".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link GetOrderDays#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetOrderDays#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected GetOrderDays() {
      super(Frontend.this, "POST", REST_PATH, null, com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderDaysResponse.class);
    }

    @Override
    public GetOrderDays setAlt(java.lang.String alt) {
      return (GetOrderDays) super.setAlt(alt);
    }

    @Override
    public GetOrderDays setFields(java.lang.String fields) {
      return (GetOrderDays) super.setFields(fields);
    }

    @Override
    public GetOrderDays setKey(java.lang.String key) {
      return (GetOrderDays) super.setKey(key);
    }

    @Override
    public GetOrderDays setOauthToken(java.lang.String oauthToken) {
      return (GetOrderDays) super.setOauthToken(oauthToken);
    }

    @Override
    public GetOrderDays setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetOrderDays) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetOrderDays setQuotaUser(java.lang.String quotaUser) {
      return (GetOrderDays) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetOrderDays setUserIp(java.lang.String userIp) {
      return (GetOrderDays) super.setUserIp(userIp);
    }

    @Override
    public GetOrderDays set(String parameterName, Object value) {
      return (GetOrderDays) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getOrderSummery".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link GetOrderSummery#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcReportRequest}
   * @return the request
   */
  public GetOrderSummery getOrderSummery(com.appspot.ruiqi_test.frontend.model.FrontendRpcReportRequest content) throws java.io.IOException {
    GetOrderSummery result = new GetOrderSummery(content);
    initialize(result);
    return result;
  }

  public class GetOrderSummery extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcReportResponse> {

    private static final String REST_PATH = "front/get_order_summery";

    /**
     * Create a request for the method "getOrderSummery".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link GetOrderSummery#execute()} method to invoke the remote
     * operation. <p> {@link GetOrderSummery#initialize(com.google.api.client.googleapis.services.Abst
     * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcReportRequest}
     * @since 1.13
     */
    protected GetOrderSummery(com.appspot.ruiqi_test.frontend.model.FrontendRpcReportRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcReportResponse.class);
    }

    @Override
    public GetOrderSummery setAlt(java.lang.String alt) {
      return (GetOrderSummery) super.setAlt(alt);
    }

    @Override
    public GetOrderSummery setFields(java.lang.String fields) {
      return (GetOrderSummery) super.setFields(fields);
    }

    @Override
    public GetOrderSummery setKey(java.lang.String key) {
      return (GetOrderSummery) super.setKey(key);
    }

    @Override
    public GetOrderSummery setOauthToken(java.lang.String oauthToken) {
      return (GetOrderSummery) super.setOauthToken(oauthToken);
    }

    @Override
    public GetOrderSummery setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetOrderSummery) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetOrderSummery setQuotaUser(java.lang.String quotaUser) {
      return (GetOrderSummery) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetOrderSummery setUserIp(java.lang.String userIp) {
      return (GetOrderSummery) super.setUserIp(userIp);
    }

    @Override
    public GetOrderSummery set(String parameterName, Object value) {
      return (GetOrderSummery) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getStorage".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link GetStorage#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcGetStorageRequest}
   * @return the request
   */
  public GetStorage getStorage(com.appspot.ruiqi_test.frontend.model.FrontendRpcGetStorageRequest content) throws java.io.IOException {
    GetStorage result = new GetStorage(content);
    initialize(result);
    return result;
  }

  public class GetStorage extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcStorageResponse> {

    private static final String REST_PATH = "front/get_storage";

    /**
     * Create a request for the method "getStorage".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link GetStorage#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetStorage#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcGetStorageRequest}
     * @since 1.13
     */
    protected GetStorage(com.appspot.ruiqi_test.frontend.model.FrontendRpcGetStorageRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcStorageResponse.class);
    }

    @Override
    public GetStorage setAlt(java.lang.String alt) {
      return (GetStorage) super.setAlt(alt);
    }

    @Override
    public GetStorage setFields(java.lang.String fields) {
      return (GetStorage) super.setFields(fields);
    }

    @Override
    public GetStorage setKey(java.lang.String key) {
      return (GetStorage) super.setKey(key);
    }

    @Override
    public GetStorage setOauthToken(java.lang.String oauthToken) {
      return (GetStorage) super.setOauthToken(oauthToken);
    }

    @Override
    public GetStorage setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetStorage) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetStorage setQuotaUser(java.lang.String quotaUser) {
      return (GetStorage) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetStorage setUserIp(java.lang.String userIp) {
      return (GetStorage) super.setUserIp(userIp);
    }

    @Override
    public GetStorage set(String parameterName, Object value) {
      return (GetStorage) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listCustomer".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link ListCustomer#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleRequest}
   * @return the request
   */
  public ListCustomer listCustomer(com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleRequest content) throws java.io.IOException {
    ListCustomer result = new ListCustomer(content);
    initialize(result);
    return result;
  }

  public class ListCustomer extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcCustomerCollectionResponse> {

    private static final String REST_PATH = "front/list_customer";

    /**
     * Create a request for the method "listCustomer".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link ListCustomer#execute()} method to invoke the remote
     * operation. <p> {@link
     * ListCustomer#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleRequest}
     * @since 1.13
     */
    protected ListCustomer(com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcCustomerCollectionResponse.class);
    }

    @Override
    public ListCustomer setAlt(java.lang.String alt) {
      return (ListCustomer) super.setAlt(alt);
    }

    @Override
    public ListCustomer setFields(java.lang.String fields) {
      return (ListCustomer) super.setFields(fields);
    }

    @Override
    public ListCustomer setKey(java.lang.String key) {
      return (ListCustomer) super.setKey(key);
    }

    @Override
    public ListCustomer setOauthToken(java.lang.String oauthToken) {
      return (ListCustomer) super.setOauthToken(oauthToken);
    }

    @Override
    public ListCustomer setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListCustomer) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListCustomer setQuotaUser(java.lang.String quotaUser) {
      return (ListCustomer) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListCustomer setUserIp(java.lang.String userIp) {
      return (ListCustomer) super.setUserIp(userIp);
    }

    @Override
    public ListCustomer set(String parameterName, Object value) {
      return (ListCustomer) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listOrder".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link ListOrder#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleRequest}
   * @return the request
   */
  public ListOrder listOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleRequest content) throws java.io.IOException {
    ListOrder result = new ListOrder(content);
    initialize(result);
    return result;
  }

  public class ListOrder extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderCollectionResponse> {

    private static final String REST_PATH = "front/list_order";

    /**
     * Create a request for the method "listOrder".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link ListOrder#execute()} method to invoke the remote
     * operation. <p> {@link
     * ListOrder#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleRequest}
     * @since 1.13
     */
    protected ListOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderCollectionResponse.class);
    }

    @Override
    public ListOrder setAlt(java.lang.String alt) {
      return (ListOrder) super.setAlt(alt);
    }

    @Override
    public ListOrder setFields(java.lang.String fields) {
      return (ListOrder) super.setFields(fields);
    }

    @Override
    public ListOrder setKey(java.lang.String key) {
      return (ListOrder) super.setKey(key);
    }

    @Override
    public ListOrder setOauthToken(java.lang.String oauthToken) {
      return (ListOrder) super.setOauthToken(oauthToken);
    }

    @Override
    public ListOrder setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListOrder) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListOrder setQuotaUser(java.lang.String quotaUser) {
      return (ListOrder) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListOrder setUserIp(java.lang.String userIp) {
      return (ListOrder) super.setUserIp(userIp);
    }

    @Override
    public ListOrder set(String parameterName, Object value) {
      return (ListOrder) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listProduct".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link ListProduct#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleRequest}
   * @return the request
   */
  public ListProduct listProduct(com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleRequest content) throws java.io.IOException {
    ListProduct result = new ListProduct(content);
    initialize(result);
    return result;
  }

  public class ListProduct extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcProductCollectionResponse> {

    private static final String REST_PATH = "front/list_product";

    /**
     * Create a request for the method "listProduct".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link ListProduct#execute()} method to invoke the remote
     * operation. <p> {@link
     * ListProduct#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleRequest}
     * @since 1.13
     */
    protected ListProduct(com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcProductCollectionResponse.class);
    }

    @Override
    public ListProduct setAlt(java.lang.String alt) {
      return (ListProduct) super.setAlt(alt);
    }

    @Override
    public ListProduct setFields(java.lang.String fields) {
      return (ListProduct) super.setFields(fields);
    }

    @Override
    public ListProduct setKey(java.lang.String key) {
      return (ListProduct) super.setKey(key);
    }

    @Override
    public ListProduct setOauthToken(java.lang.String oauthToken) {
      return (ListProduct) super.setOauthToken(oauthToken);
    }

    @Override
    public ListProduct setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListProduct) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListProduct setQuotaUser(java.lang.String quotaUser) {
      return (ListProduct) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListProduct setUserIp(java.lang.String userIp) {
      return (ListProduct) super.setUserIp(userIp);
    }

    @Override
    public ListProduct set(String parameterName, Object value) {
      return (ListProduct) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "login".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link Login#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcLoginRequest}
   * @return the request
   */
  public Login login(com.appspot.ruiqi_test.frontend.model.FrontendRpcLoginRequest content) throws java.io.IOException {
    Login result = new Login(content);
    initialize(result);
    return result;
  }

  public class Login extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcUserResponse> {

    private static final String REST_PATH = "front/login";

    /**
     * Create a request for the method "login".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link Login#execute()} method to invoke the remote operation.
     * <p> {@link
     * Login#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcLoginRequest}
     * @since 1.13
     */
    protected Login(com.appspot.ruiqi_test.frontend.model.FrontendRpcLoginRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcUserResponse.class);
    }

    @Override
    public Login setAlt(java.lang.String alt) {
      return (Login) super.setAlt(alt);
    }

    @Override
    public Login setFields(java.lang.String fields) {
      return (Login) super.setFields(fields);
    }

    @Override
    public Login setKey(java.lang.String key) {
      return (Login) super.setKey(key);
    }

    @Override
    public Login setOauthToken(java.lang.String oauthToken) {
      return (Login) super.setOauthToken(oauthToken);
    }

    @Override
    public Login setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Login) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Login setQuotaUser(java.lang.String quotaUser) {
      return (Login) super.setQuotaUser(quotaUser);
    }

    @Override
    public Login setUserIp(java.lang.String userIp) {
      return (Login) super.setUserIp(userIp);
    }

    @Override
    public Login set(String parameterName, Object value) {
      return (Login) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "logout".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link Logout#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcLogoutRequest}
   * @return the request
   */
  public Logout logout(com.appspot.ruiqi_test.frontend.model.FrontendRpcLogoutRequest content) throws java.io.IOException {
    Logout result = new Logout(content);
    initialize(result);
    return result;
  }

  public class Logout extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleResponse> {

    private static final String REST_PATH = "front/logout";

    /**
     * Create a request for the method "logout".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link Logout#execute()} method to invoke the remote operation.
     * <p> {@link
     * Logout#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcLogoutRequest}
     * @since 1.13
     */
    protected Logout(com.appspot.ruiqi_test.frontend.model.FrontendRpcLogoutRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcSimpleResponse.class);
    }

    @Override
    public Logout setAlt(java.lang.String alt) {
      return (Logout) super.setAlt(alt);
    }

    @Override
    public Logout setFields(java.lang.String fields) {
      return (Logout) super.setFields(fields);
    }

    @Override
    public Logout setKey(java.lang.String key) {
      return (Logout) super.setKey(key);
    }

    @Override
    public Logout setOauthToken(java.lang.String oauthToken) {
      return (Logout) super.setOauthToken(oauthToken);
    }

    @Override
    public Logout setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Logout) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Logout setQuotaUser(java.lang.String quotaUser) {
      return (Logout) super.setQuotaUser(quotaUser);
    }

    @Override
    public Logout setUserIp(java.lang.String userIp) {
      return (Logout) super.setUserIp(userIp);
    }

    @Override
    public Logout set(String parameterName, Object value) {
      return (Logout) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "makeOrder".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link MakeOrder#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcMakeOrderRequest}
   * @return the request
   */
  public MakeOrder makeOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcMakeOrderRequest content) throws java.io.IOException {
    MakeOrder result = new MakeOrder(content);
    initialize(result);
    return result;
  }

  public class MakeOrder extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderResponse> {

    private static final String REST_PATH = "front/make_order";

    /**
     * Create a request for the method "makeOrder".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link MakeOrder#execute()} method to invoke the remote
     * operation. <p> {@link
     * MakeOrder#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcMakeOrderRequest}
     * @since 1.13
     */
    protected MakeOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcMakeOrderRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderResponse.class);
    }

    @Override
    public MakeOrder setAlt(java.lang.String alt) {
      return (MakeOrder) super.setAlt(alt);
    }

    @Override
    public MakeOrder setFields(java.lang.String fields) {
      return (MakeOrder) super.setFields(fields);
    }

    @Override
    public MakeOrder setKey(java.lang.String key) {
      return (MakeOrder) super.setKey(key);
    }

    @Override
    public MakeOrder setOauthToken(java.lang.String oauthToken) {
      return (MakeOrder) super.setOauthToken(oauthToken);
    }

    @Override
    public MakeOrder setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (MakeOrder) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public MakeOrder setQuotaUser(java.lang.String quotaUser) {
      return (MakeOrder) super.setQuotaUser(quotaUser);
    }

    @Override
    public MakeOrder setUserIp(java.lang.String userIp) {
      return (MakeOrder) super.setUserIp(userIp);
    }

    @Override
    public MakeOrder set(String parameterName, Object value) {
      return (MakeOrder) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "moreHistoryOrder".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link MoreHistoryOrder#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcMoreHistoryOrderRequest}
   * @return the request
   */
  public MoreHistoryOrder moreHistoryOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcMoreHistoryOrderRequest content) throws java.io.IOException {
    MoreHistoryOrder result = new MoreHistoryOrder(content);
    initialize(result);
    return result;
  }

  public class MoreHistoryOrder extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderHistoryResponse> {

    private static final String REST_PATH = "front/more_history_order";

    /**
     * Create a request for the method "moreHistoryOrder".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link MoreHistoryOrder#execute()} method to invoke the remote
     * operation. <p> {@link MoreHistoryOrder#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcMoreHistoryOrderRequest}
     * @since 1.13
     */
    protected MoreHistoryOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcMoreHistoryOrderRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderHistoryResponse.class);
    }

    @Override
    public MoreHistoryOrder setAlt(java.lang.String alt) {
      return (MoreHistoryOrder) super.setAlt(alt);
    }

    @Override
    public MoreHistoryOrder setFields(java.lang.String fields) {
      return (MoreHistoryOrder) super.setFields(fields);
    }

    @Override
    public MoreHistoryOrder setKey(java.lang.String key) {
      return (MoreHistoryOrder) super.setKey(key);
    }

    @Override
    public MoreHistoryOrder setOauthToken(java.lang.String oauthToken) {
      return (MoreHistoryOrder) super.setOauthToken(oauthToken);
    }

    @Override
    public MoreHistoryOrder setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (MoreHistoryOrder) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public MoreHistoryOrder setQuotaUser(java.lang.String quotaUser) {
      return (MoreHistoryOrder) super.setQuotaUser(quotaUser);
    }

    @Override
    public MoreHistoryOrder setUserIp(java.lang.String userIp) {
      return (MoreHistoryOrder) super.setUserIp(userIp);
    }

    @Override
    public MoreHistoryOrder set(String parameterName, Object value) {
      return (MoreHistoryOrder) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "receiveOrder".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link ReceiveOrder#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest}
   * @return the request
   */
  public ReceiveOrder receiveOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest content) throws java.io.IOException {
    ReceiveOrder result = new ReceiveOrder(content);
    initialize(result);
    return result;
  }

  public class ReceiveOrder extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderResponse> {

    private static final String REST_PATH = "front/receive_order";

    /**
     * Create a request for the method "receiveOrder".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link ReceiveOrder#execute()} method to invoke the remote
     * operation. <p> {@link
     * ReceiveOrder#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest}
     * @since 1.13
     */
    protected ReceiveOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcChangeOrderStateRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderResponse.class);
    }

    @Override
    public ReceiveOrder setAlt(java.lang.String alt) {
      return (ReceiveOrder) super.setAlt(alt);
    }

    @Override
    public ReceiveOrder setFields(java.lang.String fields) {
      return (ReceiveOrder) super.setFields(fields);
    }

    @Override
    public ReceiveOrder setKey(java.lang.String key) {
      return (ReceiveOrder) super.setKey(key);
    }

    @Override
    public ReceiveOrder setOauthToken(java.lang.String oauthToken) {
      return (ReceiveOrder) super.setOauthToken(oauthToken);
    }

    @Override
    public ReceiveOrder setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ReceiveOrder) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ReceiveOrder setQuotaUser(java.lang.String quotaUser) {
      return (ReceiveOrder) super.setQuotaUser(quotaUser);
    }

    @Override
    public ReceiveOrder setUserIp(java.lang.String userIp) {
      return (ReceiveOrder) super.setUserIp(userIp);
    }

    @Override
    public ReceiveOrder set(String parameterName, Object value) {
      return (ReceiveOrder) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "refreshHistoryOrder".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link RefreshHistoryOrder#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcRefreshHistoryOrderRequest}
   * @return the request
   */
  public RefreshHistoryOrder refreshHistoryOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcRefreshHistoryOrderRequest content) throws java.io.IOException {
    RefreshHistoryOrder result = new RefreshHistoryOrder(content);
    initialize(result);
    return result;
  }

  public class RefreshHistoryOrder extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderHistoryResponse> {

    private static final String REST_PATH = "front/refersh_history_order";

    /**
     * Create a request for the method "refreshHistoryOrder".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link RefreshHistoryOrder#execute()} method to invoke the remote
     * operation. <p> {@link RefreshHistoryOrder#initialize(com.google.api.client.googleapis.services.
     * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcRefreshHistoryOrderRequest}
     * @since 1.13
     */
    protected RefreshHistoryOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcRefreshHistoryOrderRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderHistoryResponse.class);
    }

    @Override
    public RefreshHistoryOrder setAlt(java.lang.String alt) {
      return (RefreshHistoryOrder) super.setAlt(alt);
    }

    @Override
    public RefreshHistoryOrder setFields(java.lang.String fields) {
      return (RefreshHistoryOrder) super.setFields(fields);
    }

    @Override
    public RefreshHistoryOrder setKey(java.lang.String key) {
      return (RefreshHistoryOrder) super.setKey(key);
    }

    @Override
    public RefreshHistoryOrder setOauthToken(java.lang.String oauthToken) {
      return (RefreshHistoryOrder) super.setOauthToken(oauthToken);
    }

    @Override
    public RefreshHistoryOrder setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RefreshHistoryOrder) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RefreshHistoryOrder setQuotaUser(java.lang.String quotaUser) {
      return (RefreshHistoryOrder) super.setQuotaUser(quotaUser);
    }

    @Override
    public RefreshHistoryOrder setUserIp(java.lang.String userIp) {
      return (RefreshHistoryOrder) super.setUserIp(userIp);
    }

    @Override
    public RefreshHistoryOrder set(String parameterName, Object value) {
      return (RefreshHistoryOrder) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "searchHistoryOrder".
   *
   * This request holds the parameters needed by the frontend server.  After setting any optional
   * parameters, call the {@link SearchHistoryOrder#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcSearchHistoryOrderRequest}
   * @return the request
   */
  public SearchHistoryOrder searchHistoryOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcSearchHistoryOrderRequest content) throws java.io.IOException {
    SearchHistoryOrder result = new SearchHistoryOrder(content);
    initialize(result);
    return result;
  }

  public class SearchHistoryOrder extends FrontendRequest<com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderCollectionResponse> {

    private static final String REST_PATH = "front/search_history_order";

    /**
     * Create a request for the method "searchHistoryOrder".
     *
     * This request holds the parameters needed by the the frontend server.  After setting any
     * optional parameters, call the {@link SearchHistoryOrder#execute()} method to invoke the remote
     * operation. <p> {@link SearchHistoryOrder#initialize(com.google.api.client.googleapis.services.A
     * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ruiqi_test.frontend.model.FrontendRpcSearchHistoryOrderRequest}
     * @since 1.13
     */
    protected SearchHistoryOrder(com.appspot.ruiqi_test.frontend.model.FrontendRpcSearchHistoryOrderRequest content) {
      super(Frontend.this, "POST", REST_PATH, content, com.appspot.ruiqi_test.frontend.model.FrontendRpcOrderCollectionResponse.class);
    }

    @Override
    public SearchHistoryOrder setAlt(java.lang.String alt) {
      return (SearchHistoryOrder) super.setAlt(alt);
    }

    @Override
    public SearchHistoryOrder setFields(java.lang.String fields) {
      return (SearchHistoryOrder) super.setFields(fields);
    }

    @Override
    public SearchHistoryOrder setKey(java.lang.String key) {
      return (SearchHistoryOrder) super.setKey(key);
    }

    @Override
    public SearchHistoryOrder setOauthToken(java.lang.String oauthToken) {
      return (SearchHistoryOrder) super.setOauthToken(oauthToken);
    }

    @Override
    public SearchHistoryOrder setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (SearchHistoryOrder) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public SearchHistoryOrder setQuotaUser(java.lang.String quotaUser) {
      return (SearchHistoryOrder) super.setQuotaUser(quotaUser);
    }

    @Override
    public SearchHistoryOrder setUserIp(java.lang.String userIp) {
      return (SearchHistoryOrder) super.setUserIp(userIp);
    }

    @Override
    public SearchHistoryOrder set(String parameterName, Object value) {
      return (SearchHistoryOrder) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Frontend}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Frontend}. */
    @Override
    public Frontend build() {
      return new Frontend(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FrontendRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFrontendRequestInitializer(
        FrontendRequestInitializer frontendRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(frontendRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
